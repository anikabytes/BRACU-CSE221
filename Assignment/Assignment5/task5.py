# -*- coding: utf-8 -*-
"""task5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Pjb1k6dNanBmc7WJRv_ffqZRmTfNrJEQ
"""

import heapq
import math 

def Dijkstra(graph,source):
    dist=[math.inf]*(len(graph)+1)
    visited=[False]*(len(graph)+1)
    prev = [0]*(len(graph)+1)
    queue = []

    for v in graph:
        if v!=source:
            dist[v] = -1*math.inf
            prev[v] = None 
        heapq.heappush(queue,[dist[v]*-1,v])
          
    while queue :
        u = heapq.heappop(queue)[1]

        if visited[u] == False:
            visited[u] = True
            
            for v in graph[u]:
                val = min(dist[u], graph[u][v])
                if val > dist[v]: 
                    dist[v] = val 
                    if u not in prev : 
                        prev[v] = u 
                      
                    idx = queue.index([math.inf,v])
                    
                    if idx in queue:
                        queue.pop(idx)
                     
                    heapq.heappush(queue,[dist[v]*-1,v])


    for j in range(len(dist)): 
        if dist[j]== -1*math.inf:
            dist[j]=-1  
    dist[source] = 0                    
    return dist 

f = open("/content/input5.txt","r")
f_w = open("/content/output5.txt","w")
f = f.read()
f = f.split('\n')

T = int(f[0])
f = f[1:]
for i in range(T):
    M = int(f[0].split()[0])
    N = int(f[0].split()[1])  

    f = f[1:]

    rateData = 0
    graph={}
    
    for i in range(N):     
        u = int(f[i].split()[0])
        v = int(f[i].split()[1])
        d = int(f[i].split()[2])

        if u in graph.keys():
            graph[u][v] = d

        else:
            graph[u]={}
            graph[u][v]= d
    graph[len(graph)+1]={}
    data = Dijkstra(graph,int(f[N]))
    f = f[N+1:]
    if len(f) <= 0 :
        break
     
    st = ''
    for i in data :
        if i == math.inf :
            continue 
        else :
            st += str(i) + ' '
    f_w.write(f'{st} \n')

f_w.close()