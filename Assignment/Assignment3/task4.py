# -*- coding: utf-8 -*-
"""task4.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1K4K0i7jtlHuuFCw-uwzPcf0SkhnYmvkl
"""

arr = []
visited = []
start_lis = []
def apply_DFS(dic,source,start): 
    start_lis.append(start)
    if source not in visited:
        arr.append(source)
        for destin in dic[source]:
            if dic[source] != None and destin not in visited : 
                apply_DFS(dic,destin,start)
                visited.append(destin)
                dic[source].remove(destin)
    if dic[source] != None :
        start = source
        for destin in dic[source] :
            dic[source].remove(destin)
            apply_DFS(dic,source,start)
    return start_lis 
    
            
    

def finding_cycle(lis) :
    
    if lis[0] == lis[-1] :
        w.write('No')
    else :
        w.write('Yes')
   
f = open('/content/input4_1.txt','r')
w = open('/content/output4_1.txt','w')
f1 = f.readline().split()
v = int(f1[0])
c = int(f1[1].strip())
dic = {}
for i in range(1,v+1) :
    if i not in dic :
        dic[i] = []

for j in range(0,c) :
    rd = f.readline().split()
    source,destin = int(rd[0]),int(rd[1])
    if (source in dic) and (destin not in dic[source]) :
        dic[source].append(destin)
visited = [0]*(max(dic)+1)
for i,k in enumerate(dic.keys()) :
    if i == 0 :
        l = k 
        a = apply_DFS(dic,k,l)
finding_cycle(a)
        
w.close()